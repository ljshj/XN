package com.bgood.xn.ui.message;import java.util.ArrayList;import java.util.HashMap;import java.util.Iterator;import java.util.List;import java.util.Map;import java.util.UUID;import java.util.Map.Entry;import android.app.Activity;import android.content.BroadcastReceiver;import android.content.Context;import android.content.DialogInterface;import android.content.Intent;import android.content.IntentFilter;import android.os.AsyncTask;import android.os.Bundle;import android.support.v4.app.Fragment;import android.support.v4.view.ViewPager;import android.support.v4.view.ViewPager.OnPageChangeListener;import android.text.TextUtils;import android.util.Log;import android.view.KeyEvent;import android.view.View;import android.view.View.OnClickListener;import android.widget.Button;import android.widget.RadioButton;import android.widget.RadioGroup;import android.widget.RadioGroup.OnCheckedChangeListener;import com.alibaba.fastjson.JSON;import com.bgood.xn.R;import com.bgood.xn.adapter.FragmentViewPagerAdapter;import com.bgood.xn.bean.FriendBean;import com.bgood.xn.bean.FriendGroupBean;import com.bgood.xn.bean.GroupAddBean;import com.bgood.xn.bean.GroupBean;import com.bgood.xn.bean.GroupMemberBean;import com.bgood.xn.bean.UserInfoBean;import com.bgood.xn.bean.response.FriendAndGroupResponse;import com.bgood.xn.network.BaseNetWork;import com.bgood.xn.network.BaseNetWork.ReturnCode;import com.bgood.xn.network.http.HttpRequestAsyncTask.TaskListenerWithState;import com.bgood.xn.network.http.HttpRequestInfo;import com.bgood.xn.network.http.HttpResponseInfo;import com.bgood.xn.network.http.HttpResponseInfo.HttpTaskState;import com.bgood.xn.network.request.IMRequest;import com.bgood.xn.network.request.UserCenterRequest;import com.bgood.xn.system.BGApp;import com.bgood.xn.ui.message.fragment.ChatHistoryFragment;import com.bgood.xn.ui.message.fragment.CommunicateFragment;import com.bgood.xn.ui.message.fragment.FriendListFragment;import com.bgood.xn.ui.message.fragment.GroupFragment;import com.bgood.xn.ui.user.account.LoginActivity;import com.bgood.xn.utils.LogUtils;import com.bgood.xn.view.BToast;import com.bgood.xn.view.LoadingProgress;import com.easemob.EMConnectionListener;import com.easemob.EMError;import com.easemob.chat.CmdMessageBody;import com.easemob.chat.Constant;import com.easemob.chat.EMChat;import com.easemob.chat.EMChatManager;import com.easemob.chat.EMContactListener;import com.easemob.chat.EMContactManager;import com.easemob.chat.EMConversation;import com.easemob.chat.EMGroup;import com.easemob.chat.EMGroupManager;import com.easemob.chat.EMMessage;import com.easemob.chat.EMMessage.ChatType;import com.easemob.chat.EMMessage.Type;import com.easemob.chat.EMNotifier;import com.easemob.chat.GroupChangeListener;import com.easemob.chat.TextMessageBody;import com.easemob.chat.activity.BaseActivity;import com.easemob.chat.activity.ChatActivity;import com.easemob.chat.db.InviteMessgeDao;import com.easemob.chat.domain.InviteMessage;import com.easemob.chat.domain.InviteMessage.InviteMesageStatus;import com.easemob.exceptions.EaseMobException;import com.easemob.util.EMLog;import com.easemob.util.HanziToPinyin;import com.easemob.util.NetUtils;/** * @todo:聊天主界面 * @author:hg_liuzl@163.com */public class MessageActivity extends BaseActivity implements OnCheckedChangeListener,OnClickListener,TaskListenerWithState {		/**被同意*/	public static final int MSG_FRIEND_BEAGREE = 1;	/**被邀请*/	public static final int MSG_FRIEND_BEINVITEED = MSG_FRIEND_BEAGREE + 1;	/**被拒绝*/	public static final int MSG_FRIEND_BEREFUSED = MSG_FRIEND_BEINVITEED + 1;	/**用户申请加入群聊*/	public static final int MSG_GROUP_BEAPPLYED = MSG_FRIEND_BEREFUSED + 1;	/**加群申请被同意*/	public static final int MSG_GROUP_BEAGREE = MSG_GROUP_BEAPPLYED + 1;	/**邀请加入群聊*/	public static final int MSG_GROUP_INVITATION = MSG_GROUP_BEAGREE + 1;	/**被移出群*/	public static final int MSG_GROUP_REMOVE = MSG_GROUP_INVITATION + 1;	/**群被解散*/	public static final int MSG_GROUP_DISMISS = MSG_GROUP_REMOVE + 1;	/**当前用户非管理员时，收不到通知，只能通过消息 来加入新成员 */	public static final int MSG_GROUP_NEWMESSAGE = MSG_GROUP_DISMISS + 1;	/**操作类型，同意，邀请，拒绝,申请加群，加群被同意，邀请加入群聊*/	private int m_other_action = MSG_FRIEND_BEAGREE;		/**添加好友的理由*/	private String mAddFriendReason = "";		/**添加群需要的一些信息*/	private GroupAddBean groupAddBean = null;		/**登录操作码**/	private static final int CODE_LOGIN = 100;		public static final int MESSAGE_MAIN = 0;	public static final int MESSAGE_FRIEND = 1;	public static final int MESSAGE_GROUP = 2;	public static final int MESSAGE_COMMUNICATION_HALL = 3;		private int messageCheckType = 0;	private RadioGroup radioGroup;	private RadioButton rbHistory,rbFriend,rbGroup,rbCommunit;	private Button btnAdd;	private ViewPager mTabPager;//页卡内容		private ArrayList<Fragment> fragmentList;	private int index;	// 当前fragment的index	private int currentTabIndex;		private ChatHistoryFragment chatHistoryFragment;	private FriendListFragment contactListFragment;	private GroupFragment groupFragment;	private CommunicateFragment communicateFragment;	private Activity mActivity = null;		// 账号在别处登录	public boolean isConflict = false;		/**是否有加载过数据*/	public boolean isFirst = true;		/**存放要操作的mUserId*/	public List<String> mUserIdList = null;		public static MessageActivity instance = null;		@Override	protected void onCreate(Bundle savedInstanceState) {		super.onCreate(savedInstanceState);		if (savedInstanceState != null && savedInstanceState.getBoolean("isConflict", false)) {            // 防止被T后，没点确定按钮然后按了home键，长期在后台又进app导致的crash            // 三个fragment里加的判断同理            finish();            startActivity(new Intent(this, LoginActivity.class));            return;        }				instance = this;				mActivity = this;		setContentView(R.layout.layout_message_main);				doLoadData();	}		private void doLoadData() {		if (BGApp.isUserLogin) {			doLoadIMData();		} else {			Intent intent = new Intent(mActivity, LoginActivity.class);			intent.putExtra(LoginActivity.FROM_KEY,LoginActivity.FROM_KEY_OTHER);			mActivity.startActivityForResult(intent, CODE_LOGIN);		}	}		/**	 * 	 * @todo:加载聊天内容与好友，以及群	 * @date:2014-12-27 上午11:42:49	 * @author:hg_liuzl@163.com	 * @params:	 */	private void doLoadIMData(){		if (BGApp.getInstance().isLogin()) {			try {				/** 加载聊天记录 */				// 获取群聊列表(群聊里只有groupid和groupname等简单信息，不包含members),sdk会把群组存入到内存和db中				try {					EMGroupManager.getInstance().getGroupsFromServer();				} catch (EaseMobException e) {					// TODO Auto-generated catch block					e.printStackTrace();				}				EMChatManager.getInstance().loadAllConversations();				/** 获取好友与群聊表 */				if (!pUitl.hasInitFriendAndGroup()) {					IMRequest.getInstance().requestContactsList(this,mActivity);				}else{					dealIMFriendAndGroup();				}							} catch (Exception e) {				e.printStackTrace();			}		}	}			/**	 * 	 * @todo:处理好友与群的数据	 * @date:2014-12-29 上午10:53:31	 * @author:hg_liuzl@163.com	 * @params:	 */	public void dealIMFriendAndGroup() {		pUitl.setInitFriendAndGroup(true);				List<FriendBean> friends = FriendBean.queryFriendBean(dbHelper);				Map<String, FriendBean> userAndNameMap = new HashMap<String, FriendBean>();		Map<String, FriendBean> userAndIdMap = new HashMap<String, FriendBean>();				for (FriendBean fb : friends) {			FriendBean.setUserHearder(fb.name, fb);			userAndNameMap.put(fb.name, fb);			userAndIdMap.put(fb.userid, fb);		}				// 添加user"申请与通知"		FriendBean newFriends = new FriendBean();		newFriends.setName(Constant.NEW_FRIENDS_USERNAME);		newFriends.setNick("申请与通知");		newFriends.setHeader("");		userAndNameMap.put(Constant.NEW_FRIENDS_USERNAME, newFriends);				// 好友存入内存		BGApp.getInstance().setFriendMapById(userAndIdMap);		BGApp.getInstance().setFriendMapByName(userAndNameMap);				//群存入内存中		BGApp.getInstance().setGroupMap(GroupBean.queryGroupBeanByType(dbHelper, 0));		BGApp.getInstance().setTempMap(GroupBean.queryGroupBeanByType(dbHelper, 1));		BGApp.getInstance().setGroupMemberBean(GroupMemberBean.queryGroupMembersAndGroupId(dbHelper));		BGApp.getInstance().setGroupMemberAndHxId(GroupMemberBean.queryGroupMembersAndHXGroupId(dbHelper));		initViews();	}		@Override	public void onActivityResult(int requestCode, int resultCode, Intent data) {		super.onActivityResult(requestCode, resultCode, data);		if(requestCode == CODE_LOGIN && resultCode == Activity.RESULT_OK){			doLoadIMData();		}else if(requestCode == CODE_LOGIN && resultCode == Activity.RESULT_CANCELED){			finish();		}	}		/**	 * 初始化tabhost	 */	private void initViews()	{		if(isFirst){	//如果已经加载了组件，则下次更新数据不需要重新加载组件			isFirst = false;		}else{			return;		}				inviteMessgeDao = new InviteMessgeDao(mActivity);		btnAdd = (Button) findViewById(R.id.b_message_main_add);		btnAdd.setOnClickListener(this);		radioGroup = (RadioGroup) findViewById(R.id.rg_message_main_tab);		radioGroup.setOnCheckedChangeListener(this);				rbHistory = (RadioButton) findViewById(R.id.message_main_tab_messagecenter);		rbFriend = (RadioButton) findViewById(R.id.message_main_tab_friend);		rbGroup = (RadioButton) findViewById(R.id.message_main_tab_group);		rbCommunit = (RadioButton) findViewById(R.id.message_main_tab_communication_hall);				//		unreadLabel = (TextView) layout.findViewById(R.id.unread_msg_number);//		unreadAddressLable = (TextView) layout.findViewById(R.id.unread_address_number);				initPaper();		initIM();	}				private void initPaper() {		mTabPager = (ViewPager)findViewById(R.id.fragment_paper);		fragmentList = new ArrayList<Fragment>();				chatHistoryFragment = new ChatHistoryFragment();	    contactListFragment = new FriendListFragment();	    groupFragment = new GroupFragment();	    communicateFragment = new CommunicateFragment();				fragmentList.add(chatHistoryFragment);		fragmentList.add(contactListFragment);		fragmentList.add(groupFragment);		fragmentList.add(communicateFragment);	    new FragmentViewPagerAdapter(this.getSupportFragmentManager(), mTabPager,fragmentList);	    mTabPager.setOnPageChangeListener(new ViewPagerListener());	}		@Override	public void onCheckedChanged(RadioGroup group, int checkedId)	{		switch (checkedId)		{		case R.id.message_main_tab_messagecenter:			messageCheckType = MESSAGE_MAIN;			btnAdd.setVisibility(View.INVISIBLE);			index = 0;			chatHistoryFragment.refresh();			break;		case R.id.message_main_tab_friend:			messageCheckType = MESSAGE_FRIEND;			btnAdd.setVisibility(View.VISIBLE);			index = 1;			contactListFragment.refresh();			break;		case R.id.message_main_tab_group:			messageCheckType = MESSAGE_GROUP;			btnAdd.setVisibility(View.VISIBLE);			index = 2;			groupFragment.refresh();			break;		case R.id.message_main_tab_communication_hall:			btnAdd.setVisibility(View.INVISIBLE);			messageCheckType = MESSAGE_COMMUNICATION_HALL;			index = 3;			communicateFragment.refresh();			break;		}		currentTabIndex = index;		mTabPager.setCurrentItem(index);	}		class ViewPagerListener implements OnPageChangeListener {		@Override		public void onPageScrollStateChanged(int arg0) {		}		@Override		public void onPageScrolled(int arg0, float arg1, int arg2) {		}		@Override		public void onPageSelected(int index) {			if (index == 0) {				rbHistory.setChecked(true);			} else if (index == 1) {				rbFriend.setChecked(true);			} else if (index == 2) {				rbGroup.setChecked(true);			}else if (index == 3) {				rbCommunit.setChecked(true);			}			mTabPager.setCurrentItem(index);		}	}		@Override	public void onClick(View v) {		Intent intent = null;		switch (v.getId()) {		case R.id.b_message_main_add:						if(messageCheckType == MESSAGE_FRIEND){	//添加好友				intent = new Intent(mActivity,AddFriendActivity.class);				startActivity(intent);							}else if(messageCheckType == MESSAGE_GROUP){//添加群组				intent = new Intent(mActivity,AddGroupActivity.class);				startActivity(intent);			}			break;		default:			break;		}	}		private String groupId = null;	private String hxGroupId = null;	private List<GroupBean> listGroupBean = null;	private int count =-1;		private void doSearchGroupMember(){		if(null != listGroupBean && listGroupBean.size()>0 && (count-1>=0)){			final GroupBean group = listGroupBean.get(count-1);			hxGroupId = group.hxgroupid;			groupId = group.roomid;			IMRequest.getInstance().requestGroupMembers(MessageActivity.this, MessageActivity.this, groupId,true);			count--;		}else{			dealIMFriendAndGroup();   //数据加载完后，获取内存中的数据		}	}		@Override	public void onTaskOver(HttpRequestInfo request, HttpResponseInfo info) {		if(info.getState() == HttpTaskState.STATE_OK){			BaseNetWork bNetWork = info.getmBaseNetWork();			String json = bNetWork.getStrJson();			if(bNetWork.getReturnCode() == ReturnCode.RETURNCODE_OK){				switch (bNetWork.getMessageType()) {				case 850006:						/**获取好友列表*/					FriendAndGroupResponse response = JSON.parseObject(json, FriendAndGroupResponse.class);					FriendBean.storeFriendBean(dbHelper, response.groups.get(0).items);					listGroupBean = response.fixrooms;					GroupBean.storeGroupBean(dbHelper, listGroupBean);					count = listGroupBean.size();  //除去长度最后一位					doSearchGroupMember();					break;				case 820001:					/**获取用户资料*/					UserInfoBean user = JSON.parseObject(json, UserInfoBean.class);					if(m_other_action == MSG_GROUP_BEAGREE || m_other_action == MSG_GROUP_NEWMESSAGE){	//添加群成员,或者是聊天的时候，有人加入群了，注本人不是管理员，收不到通知，只能通过userid来判断其加入群的情况												FriendBean fb = FriendBean.copyUserInfo(user);						GroupMemberBean.insertFriendBean(dbHelper, groupAddBean.hxgroupid,groupAddBean.groupid,fb);						//						dealIMFriendAndGroup();						//						//向内存中插入变更的数据//						List<FriendBean> list = new ArrayList<FriendBean>();//						list.add(fb);//						BGApp.getInstance().getGroupMemberBean().put(groupAddBean.groupid, list);		//						BGApp.getInstance().getGroupMemberAndHxId().put(groupAddBean.hxgroupid, list);							}else if(m_other_action == MSG_FRIEND_BEAGREE){						FriendBean fb = FriendBean.copyUserInfo(user);						FriendBean.insertFriendBean(dbHelper, fb);												FriendBean.setUserHearder(fb.name, fb);						BGApp.getInstance().getFriendMapById().put(fb.userid, fb);						BGApp.getInstance().getFriendMapByName().put(fb.name, fb);					}					//dealIMFriendAndGroup();					dealNoticeAndSendMsg(user);					break;				case 850008:					/**删除了好友*/					for(String userId : mUserIdList){						FriendBean.deleteFriendBean(dbHelper, userId);												/**删除缓存里的数据*/						FriendBean fb = BGApp.getInstance().getFriendMapById().get(userId);						BGApp.getInstance().getFriendMapById().remove(fb);						BGApp.getInstance().getFriendMapByName().remove(fb);					}					// 如果正在与此用户的聊天页面					if (ChatActivity.activityInstance != null && mUserIdList.contains(ChatActivity.activityInstance.getToChatUserId())) {						BToast.show(mActivity, ChatActivity.activityInstance.friendBean.name + "已把你从他好友列表里移除");						ChatActivity.activityInstance.finish();					}					updateUnreadLabel();					// 刷新ui					if (currentTabIndex == 1){						contactListFragment.refresh();					}else if(currentTabIndex == 0){						chatHistoryFragment.refresh();					}										break;				case 850012:/**获取群信息*/					GroupBean group = JSON.parseObject(json, GroupBean.class);					groupAddBean.groupid = group.roomid;					if(m_other_action == MSG_GROUP_BEAGREE ){	//被同意加入群了												GroupBean.insertGroupBean(dbHelper, group);						BGApp.getInstance().getGroupMap().put(group.hxgroupid, group);												/**获取接受者的资料*/						UserCenterRequest.getInstance().requestPersonInfo(MessageActivity.this, mActivity, groupAddBean.accepter.substring(2),false);					}else if(m_other_action == MSG_GROUP_BEAPPLYED){//有人申请加入群						/**获取接受者的资料*/						UserCenterRequest.getInstance().requestPersonInfo(MessageActivity.this, mActivity, groupAddBean.applyer.substring(2),false);					}					//对方已经同意了我的加群请求，不需要再次插入数据					//IMRequest.getInstance().requestGroupMemberJoinOrInvite(MessageActivity.this, mActivity, BGApp.mUserId, group.roomid);					break;				case 850013:	/**获取群成员并插入数据库*/					FriendGroupBean groupMember = JSON.parseObject(json, FriendGroupBean.class);					GroupMemberBean.storeGroupMemberBean(dbHelper, hxGroupId,groupId, groupMember.items);					doSearchGroupMember();					break;				case 850016:	/**解散群*/				case 850024:	/**被移除群*/					//					//退出群，或者被移出群，需要删除这个群并移除这个群的所有成员//					GroupBean.deleteGroupBean(dbHelper, groupAddBean.groupid);//					GroupMemberBean.deleteGroupMemberBean(dbHelper, json, groupAddBean.groupid);//					//清除缓存中的群组信息//					GroupBean groups = BGApp.getInstance().getGroupMap().get(groupAddBean.hxgroupid);//					BGApp.getInstance().getGroupMap().remove(groups);//					//					//清除缓存中的群组成员//					List<FriendBean> list = BGApp.getInstance().getGroupMemberBean().get(groupAddBean.groupid);//					BGApp.getInstance().getGroupMemberBean().remove(list);//					//					List<FriendBean> listAndHxId = BGApp.getInstance().getGroupMemberAndHxId().get(groupAddBean.hxgroupid);//					BGApp.getInstance().getGroupMemberBean().remove(listAndHxId);//					//					// 刷新ui//					mActivity.runOnUiThread(new Runnable() {//						public void run() {//							try {//								updateUnreadLabel();//								if (currentTabIndex == 0){//									chatHistoryFragment.refresh();//								}else if(currentTabIndex == 1){//									//									contactListFragment.onResume();//								}else if(currentTabIndex == 2){//									groupFragment.onResume();//									//								}//							} catch (Exception e) {//							}////						}//					});										break;//				case 850025:	//加群成功,后再获取当前用户的信息，插入到用户群里面去//					UserCenterRequest.getInstance().requestPersonInfo(MessageActivity.this, mActivity, BGApp.mUserId,false);//					break;				case 850027://					/**添加好友成功后*///					FriendGroupBean fgb = JSON.parseObject(json, FriendGroupBean.class);//					FriendBean.storeFriendBean(dbHelper, fgb.items);//					//					/**更新缓存里的好友列表*///					List<FriendBean> listFriends = fgb.items;//					if(null == listFriends){//						return;//					}//					Map<String, FriendBean> userAndNameMap = new HashMap<String, FriendBean>();//					Map<String, FriendBean> userAndIdMap = new HashMap<String, FriendBean>();//					for (FriendBean friendBean : listFriends) {//						userAndNameMap.put(friendBean.name, friendBean);//						userAndIdMap.put(friendBean.userid, friendBean);//					}//					BGApp.getInstance().setFriendMapById(userAndIdMap);//					BGApp.getInstance().setFriendMapByName(userAndNameMap);//					//					//					if(!isFirst){//						// 刷新好友列表//						if (currentTabIndex == 1)//							contactListFragment.refresh();//					}					break;				default:					break;				}			}		}	}		/**	 * 	 * @todo:处理不同消息类型的通知，然后分发不同消息，被邀请，被拒绝，被同意	 * @date:2014-12-29 上午11:32:35	 * @author:hg_liuzl@163.com	 * @params:@param user	 */	private void dealNoticeAndSendMsg(UserInfoBean user) {		InviteMessage msg = null;		EMMessage emMsg = null;		switch (m_other_action) {		case MSG_FRIEND_BEAGREE:			msg = new InviteMessage();			msg.setUser(user);			msg.setTime(System.currentTimeMillis());			msg.setStatus(InviteMesageStatus.BEAGREED);// 设置相应status			notifyNewIviteMessage(msg);			break;		case MSG_FRIEND_BEINVITEED:	//被邀请			msg = new InviteMessage();			msg.setUser(user);			msg.setTime(System.currentTimeMillis());			msg.setReason(mAddFriendReason);			msg.setStatus(InviteMesageStatus.BEINVITEED);// 设置相应status			notifyNewIviteMessage(msg);			break;		case MSG_FRIEND_BEREFUSED:	//被拒绝			msg = new InviteMessage();			msg.setUser(user);			msg.setTime(System.currentTimeMillis());			msg.setStatus(InviteMesageStatus.BEREFUSED);// 设置相应status			notifyNewIviteMessage(msg);			break;		case MSG_GROUP_BEAGREE:	//加群被同意			// 加群申请被同意			emMsg = EMMessage.createReceiveMessage(Type.TXT);			emMsg.setChatType(ChatType.GroupChat);			emMsg.setFrom("bg"+user.userid);			emMsg.setTo(groupAddBean.hxgroupid);			emMsg.setMsgId(UUID.randomUUID().toString());			emMsg.addBody(new TextMessageBody("bg"+user.userid + "同意了你的群聊申请"));			// 保存同意消息			EMChatManager.getInstance().saveMessage(emMsg);			// 提醒新消息			EMNotifier.getInstance(mActivity.getApplicationContext()).notifyOnNewMsg();			mActivity.runOnUiThread(new Runnable() {				public void run() {					updateUnreadLabel();					// 刷新ui					if (currentTabIndex == 0){						chatHistoryFragment.refresh();					}else if(currentTabIndex == 2){						groupFragment.refresh();					}				}			});						break;		case MSG_GROUP_BEAPPLYED:// 用户申请加入群聊			msg = new InviteMessage();			msg.setUser(user);			msg.setTime(System.currentTimeMillis());			msg.setGroupId(groupAddBean.groupid);			msg.setHxgroupId(groupAddBean.hxgroupid);			msg.setGroupName(groupAddBean.groupName);			msg.setReason(groupAddBean.reason);			msg.setStatus(InviteMesageStatus.BEAPPLYED);			notifyNewIviteMessage(msg);			break;		case MSG_GROUP_INVITATION:			// 被邀请			emMsg = EMMessage.createReceiveMessage(Type.TXT);			emMsg.setChatType(ChatType.GroupChat);			emMsg.setFrom("bg"+user.userid);			emMsg.setTo(groupAddBean.hxgroupid);			emMsg.setMsgId(UUID.randomUUID().toString());			emMsg.addBody(new TextMessageBody("邀请了"+(!TextUtils.isEmpty(user.nickn)?user.nickn:user.username) +"加入了群聊"));			// 保存邀请消息			EMChatManager.getInstance().saveMessage(emMsg);			// 提醒新消息			EMNotifier.getInstance(mActivity.getApplicationContext()).notifyOnNewMsg();			mActivity.runOnUiThread(new Runnable() {				public void run() {					updateUnreadLabel();					// 刷新ui					if (currentTabIndex == 0){						chatHistoryFragment.refresh();					}else if(currentTabIndex == 2){						groupFragment.refresh();					}				}			});						break;					default:			break;		}	}		/**	 * 移出群，或者解散群	 */	private void deleteOrRemoveGroup() {		//退出群，或者被移出群，需要删除这个群并移除这个群的所有成员		GroupBean.deleteGroupBean(dbHelper, groupAddBean.groupid);		GroupMemberBean.deleteGroupMemberBean(dbHelper, groupAddBean.groupid);//		//清除缓存中的群组信息//		GroupBean groups = BGApp.getInstance().getGroupMap().get(groupAddBean.hxgroupid);//		BGApp.getInstance().getGroupMap().remove(groups);//		//		//		//清除缓存中的群组成员//		List<FriendBean> list = BGApp.getInstance().getGroupMemberBean().get(groupAddBean.groupid);//		BGApp.getInstance().getGroupMemberBean().remove(list);//		//		List<FriendBean> listAndHxId = BGApp.getInstance().getGroupMemberAndHxId().get(groupAddBean.hxgroupid);//		BGApp.getInstance().getGroupMemberBean().remove(listAndHxId);						Iterator<?> iter = BGApp.getInstance().getGroupMap().entrySet().iterator();		while (iter.hasNext()) {			Entry<?, ?> entry = (Entry<?, ?>) iter.next();			if(entry.getKey().equals(groupAddBean.hxgroupid)){				iter.remove();				break;			}		}						Iterator<?> iterGroupMemberBean = BGApp.getInstance().getGroupMemberBean().entrySet().iterator();		while (iterGroupMemberBean.hasNext()) {			Entry<?, ?> entry = (Entry<?, ?>) iterGroupMemberBean.next();			if(entry.getKey().equals(groupAddBean.groupid)){				iterGroupMemberBean.remove();				break;			}		}				Iterator<?> iterGroupMemberAndHxId = BGApp.getInstance().getGroupMemberAndHxId().entrySet().iterator();		while (iterGroupMemberAndHxId.hasNext()) {			Entry<?, ?> entry = (Entry<?, ?>) iterGroupMemberAndHxId.next();			if(entry.getKey().equals(groupAddBean.hxgroupid)){				iterGroupMemberAndHxId.remove();				break;			}		}				//		dealIMFriendAndGroup();				groupFragment.refresh();	}				private void deleteUser() {		/**删除了好友*/		for(String userId : mUserIdList){			FriendBean.deleteFriendBean(dbHelper, userId);						FriendBean fb = BGApp.getInstance().getFriendMapById().get(userId);						if(null == fb){				return;			}						Iterator<?> iterFriendMapById = BGApp.getInstance().getFriendMapById().entrySet().iterator();			while (iterFriendMapById.hasNext()) {				Entry<?, ?> object = (Entry<?, ?>) iterFriendMapById.next();				if(object.getKey().equals(userId)){					iterFriendMapById.remove();					break;				}			}						Iterator<?> iterFriendMapByName = BGApp.getInstance().getFriendMapByName().entrySet().iterator();			while (iterFriendMapByName.hasNext()) {				Entry<?, ?> object = (Entry<?, ?>) iterFriendMapByName.next();				if(object.getKey().equals(fb.name)){					iterFriendMapByName.remove();					break;				}			}			//			dealIMFriendAndGroup();//			//			/**删除缓存里的数据*///			FriendBean fb = BGApp.getInstance().getFriendMapById().get(userId);//			BGApp.getInstance().getFriendMapById().remove(fb);//			BGApp.getInstance().getFriendMapByName().remove(fb);		}		// 如果正在与此用户的聊天页面		if (ChatActivity.activityInstance != null && mUserIdList.contains(ChatActivity.activityInstance.getToChatUserId())) {			BToast.show(mActivity, ChatActivity.activityInstance.friendBean.name + "已把你从他好友列表里移除");			ChatActivity.activityInstance.finish();		}		updateUnreadLabel();		// 刷新ui		if (currentTabIndex == 1){			contactListFragment.refresh();		}else if(currentTabIndex == 0){			chatHistoryFragment.refresh();		}	}			/***********************************************************环信通讯部分*************************************************************/	@Override	protected void onResume() {		super.onResume();		if (!isConflict) {			updateUnreadLabel();			updateUnreadAddressLable();			EMChatManager.getInstance().activityResumed();		}	}		@Override    protected void onSaveInstanceState(Bundle outState) {        outState.putBoolean("isConflict", isConflict);        super.onSaveInstanceState(outState);    }	@Override	public boolean onKeyDown(int keyCode, KeyEvent event) {		if (keyCode == KeyEvent.KEYCODE_BACK) {			moveTaskToBack(false);			return true;		}		return super.onKeyDown(keyCode, event);	}		@Override	protected void onNewIntent(Intent intent) {		super.onNewIntent(intent);		if (getIntent().getBooleanExtra("conflict", false) && !isConflictDialogShow)			showConflictDialog();	}				protected static final String TAG = "MainActivity";//	// 未读消息textview//	private TextView unreadLabel;//	// 未读通讯录textview//	private TextView unreadAddressLable;			private void initIM() {		LogUtils.i("-------------------------------------初始化IM模块------------");				 //注册一个接收消息的BroadcastReceiver		IntentFilter intentFilter = new IntentFilter(EMChatManager.getInstance().getNewMessageBroadcastAction());		intentFilter.setPriority(3);		mActivity.registerReceiver(newsMsg, intentFilter);		// 注册一个ack回执消息的BroadcastReceiver		IntentFilter ackMessageIntentFilter = new IntentFilter(EMChatManager.getInstance().getAckMessageBroadcastAction());		ackMessageIntentFilter.setPriority(3);		mActivity.registerReceiver(ackMessageReceiver, ackMessageIntentFilter);				//注册一个透传消息的BroadcastReceiver		IntentFilter cmdMessageIntentFilter = new IntentFilter(EMChatManager.getInstance().getCmdMessageBroadcastAction());		cmdMessageIntentFilter.setPriority(3);		mActivity.registerReceiver(cmdMessageReceiver, cmdMessageIntentFilter);						// 注册一个离线消息的BroadcastReceiver		// IntentFilter offlineMessageIntentFilter = new		// IntentFilter(EMChatManager.getInstance()		// .getOfflineMessageBroadcastAction());		// registerReceiver(offlineMessageReceiver, offlineMessageIntentFilter);		// setContactListener监听联系人的变化等		EMContactManager.getInstance().setContactListener(new MyContactListener());		// 注册一个监听连接状态的listener		EMChatManager.getInstance().addConnectionListener(new MyConnectionListener());		// 注册群聊相关的listener		EMGroupManager.getInstance().addGroupChangeListener(new MyGroupChangeListener());		// 通知sdk，UI 已经初始化完毕，注册了相应的receiver和listener, 可以接受broadcast了		EMChat.getInstance().setAppInited();	}	/**	 * 连接监听listener	 * 	 */	private class MyConnectionListener implements EMConnectionListener {		@Override		public void onConnected() {			mActivity.runOnUiThread(new Runnable() {				@Override				public void run() {					chatHistoryFragment.errorText.setVisibility(View.GONE);				}			});		}		@Override		public void onDisconnected(final int error) {			mActivity.runOnUiThread(new Runnable() {				@Override				public void run() {					if (error == EMError.CONNECTION_CONFLICT) {						// 显示帐号在其他设备登陆dialog						showConflictDialog();					} else {						chatHistoryFragment.errorItem.setVisibility(View.VISIBLE);						if (NetUtils.hasNetwork(mActivity))							chatHistoryFragment.errorText.setText("连接不到聊天服务器");						else							chatHistoryFragment.errorText.setText("当前网络不可用，请检查网络设置");					}				}			});		}	}		private android.app.AlertDialog.Builder conflictBuilder;	private boolean isConflictDialogShow;		/**	 * 显示帐号在别处登录dialog	 */	private void showConflictDialog() {		isConflictDialogShow = true;		BGApp.getInstance().logout(null);		if (!MessageActivity.this.isFinishing()) {			// clear up global variables			try {				if (conflictBuilder == null)					conflictBuilder = new android.app.AlertDialog.Builder(MessageActivity.this);					conflictBuilder.setTitle("下线通知");					conflictBuilder.setMessage(R.string.connect_conflict);					conflictBuilder.setPositiveButton(R.string.ok, new DialogInterface.OnClickListener() {					@Override					public void onClick(DialogInterface dialog, int which) {						dialog.dismiss();						conflictBuilder = null;						finish();						startActivity(new Intent(MessageActivity.this, LoginActivity.class));					}				});				conflictBuilder.setCancelable(false);				conflictBuilder.create().show();				isConflict = true;			} catch (Exception e) {				EMLog.e(TAG, "---------color conflictBuilder error" + e.getMessage());			}		}	}		/**	 * 	 * @todo:监听群组消息	 * @date:2014-12-27 下午3:16:03	 * @author:hg_liuzl@163.com	 */	private class MyGroupChangeListener implements GroupChangeListener {		/**邀请进入群聊**/		@Override		public void onInvitationReceived(String hxGroupId, String groupName, String inviter, String reason) {						LogUtils.i("------------onInvitationReceived----------------------------------");						boolean hasGroup = false;			for (EMGroup group : EMGroupManager.getInstance().getAllGroups()) {				if (group.getGroupId().equals(hxGroupId)) {					hasGroup = true;					break;				}			}			if (!hasGroup)				return;			m_other_action = MSG_GROUP_INVITATION;			groupAddBean = new GroupAddBean();			groupAddBean.hxgroupid = hxGroupId;			groupAddBean.groupName = groupName;			groupAddBean.inviter = inviter;			groupAddBean.reason = reason;			UserCenterRequest.getInstance().requestPersonInfo(MessageActivity.this, mActivity, inviter.substring(2),false);		}		@Override//接受邀请		public void onInvitationAccpted(String hxGroupid, String inviter, String reason) {			LogUtils.i("------------onInvitationAccpted----------------------------------");					}		@Override //拒绝邀请		public void onInvitationDeclined(String hxGroupid, String invitee, String reason) {			LogUtils.i("------------onInvitationDeclined----------------------------------");		}		@Override		/**被移出群*/		public void onUserRemoved(String hxGroupId, String groupName) {			LogUtils.i("------------onUserRemoved----------------------------------");			 m_other_action = MSG_GROUP_REMOVE;			 GroupBean group = BGApp.getInstance().getGroupMap().get(hxGroupId);			 			 if(null==group){				 return;			 }			 			 groupAddBean = new GroupAddBean();			 groupAddBean.groupid = group.roomid;			 groupAddBean.hxgroupid = group.hxgroupid;			 groupAddBean.groupName = groupName;			 			 deleteOrRemoveGroup();			 		//	 IMRequest.getInstance().requestGroupMemberRemove(MessageActivity.this, MessageActivity.this, BGApp.mUserId, group.roomid);		}		@Override/**解散群*/		public void onGroupDestroy(String hxGroupId, String groupName) {						LogUtils.i("------------onGroupDestroy----------------------------------");						 m_other_action = MSG_GROUP_DISMISS;			 GroupBean group = BGApp.getInstance().getGroupMap().get(hxGroupId);			 			 if(null==group){				 return;			 }			 			 groupAddBean = new GroupAddBean();			 groupAddBean.groupid = group.roomid;			 groupAddBean.hxgroupid = group.hxgroupid;			 groupAddBean.groupName = groupName;			 			 deleteOrRemoveGroup();			 			// IMRequest.getInstance().requestGroupDisMiss(MessageActivity.this, MessageActivity.this, group.roomid);		}				@Override		// 加群申请被拒绝，demo未实现		public void onApplicationDeclined(String groupId, String groupName, String decliner, String reason) {			LogUtils.i("------------onApplicationDeclined----------------------------------");		}		@Override		/**申请加入群聊*/		public void onApplicationReceived(String hxGroupId, String groupName, String applyer, String reason) {						LogUtils.i("------------onApplicationReceived----------------------------------");						groupAddBean = new GroupAddBean();			groupAddBean.hxgroupid = hxGroupId;			groupAddBean.groupName = groupName;			groupAddBean.reason = reason;			groupAddBean.applyer = applyer;			m_other_action = MSG_GROUP_BEAPPLYED;			IMRequest.getInstance().requestGroupInfo(MessageActivity.this, mActivity, "0", hxGroupId,false);	//获取该群的资料//			UserCenterRequest.getInstance().requestPersonInfo(MessageActivity.this, mActivity, applyer.substring(2),false);		}		@Override		// 加群申请被同意		public void onApplicationAccept(String hxGroupId, String groupName, String accepter) {			LogUtils.i("------------onApplicationAccept----------------------------------");			groupAddBean = new GroupAddBean();			groupAddBean.hxgroupid = hxGroupId;			groupAddBean.groupName = groupName;			groupAddBean.accepter = accepter;			m_other_action = MSG_GROUP_BEAGREE;			IMRequest.getInstance().requestGroupInfo(MessageActivity.this, mActivity, "0", hxGroupId,false);	//获取该群的资料		}	}	private InviteMessgeDao inviteMessgeDao;		/**	 * 	 * @todo:监听好友变化	 * @date:2014-12-27 下午3:16:38	 * @author:hg_liuzl@163.com	 */	private class MyContactListener implements EMContactListener {		@Override		/**添加好友**/		public void onContactAdded(List<String> hxIdList) {//			//			//可能会遍历2次，所以过滤一下//			List<String> toLocalList = new ArrayList<String>();	//存放存储的userId//			//			List<String> toAddUserIds = new ArrayList<String>();	//存放存储的userId//			for (String userId : hxIdList) {//				if(!toLocalList.contains(userId)){//					toLocalList.add(userId);//					String id = userId.substring(2);	//截取bg后面编号//					toAddUserIds.add(id);//				}//			}//			//			String[] array = new String[toAddUserIds.size()];//			toAddUserIds.toArray(array);//			IMRequest.getInstance().requestFriendADD(MessageActivity.this, mActivity, BGApp.mUserId, array);		}		/**删除**/		@Override		public void onContactDeleted(final List<String> hxIdList) {	//这个UserID是环信的ID编号			List<String> delUserIds = new ArrayList<String>();			for (String hxId : hxIdList) {				String userId = hxId.substring(2);	//把环信Id转换成我们的用户Id  去掉bg				delUserIds.add(userId);					inviteMessgeDao.deleteMessage(hxId);			}						mUserIdList = delUserIds;	//删除成功后要操作//			String[] arrayUserId = new String[delUserIds.size()];//			delUserIds.toArray(arrayUserId);//			IMRequest.getInstance().requestFriendDelete(MessageActivity.this, mActivity, arrayUserId);						deleteUser();					}		/**请求添加为好友*/		@Override		public void onContactInvited(String hxId, String reason) {			// 接到邀请的消息，如果不处理(同意或拒绝)，掉线后，服务器会自动再发过来，所以客户端不需要重复提醒			List<InviteMessage> msgs = inviteMessgeDao.getMessagesList();			for (InviteMessage inviteMessage : msgs) {				if (inviteMessage.getHxgroupId() == null && inviteMessage.getFrom().equals(hxId)) {					inviteMessgeDao.deleteMessage(hxId);				}			}			mAddFriendReason = reason;			m_other_action = MSG_FRIEND_BEINVITEED;			UserCenterRequest.getInstance().requestPersonInfo(MessageActivity.this, mActivity, hxId.substring(2),false);		}		/**对方同意 **/		@Override		public void onContactAgreed(String hxId) {			List<InviteMessage> msgs = inviteMessgeDao.getMessagesList();			for (InviteMessage inviteMessage : msgs) {				if (inviteMessage.getFrom().equals(hxId)) {					return;									}			}			m_other_action = MSG_FRIEND_BEAGREE;			UserCenterRequest.getInstance().requestPersonInfo(MessageActivity.this, mActivity, hxId.substring(2),false);		}		/**被拒绝**/		@Override		public void onContactRefused(String hxId) {			Log.d(hxId, hxId + "拒绝了你的好友请求");			// 接到邀请的消息，如果不处理(同意或拒绝)，掉线后，服务器会自动再发过来，所以客户端不需要重复提醒			List<InviteMessage> msgs = inviteMessgeDao.getMessagesList();			for (InviteMessage inviteMessage : msgs) {				if (inviteMessage.getHxgroupId() == null && inviteMessage.getFrom().equals(hxId)) {					inviteMessgeDao.deleteMessage(hxId);				}			}			m_other_action = MSG_FRIEND_BEREFUSED;			UserCenterRequest.getInstance().requestPersonInfo(MessageActivity.this, mActivity, hxId.substring(2),false);		}	}	/**	 * 保存提示新消息	 * 	 * @param msg	 */	private void notifyNewIviteMessage(InviteMessage msg) {		saveInviteMsg(msg);		// 提示有新消息		EMNotifier.getInstance(mActivity.getApplicationContext()).notifyOnNewMsg();		// 刷新bottom bar消息未读数		updateUnreadAddressLable();		// 刷新好友页面ui		if (currentTabIndex == 1)			contactListFragment.refresh();	}	/**	 * 保存邀请等msg	 * 	 * @param msg	 */	private void saveInviteMsg(InviteMessage msg) {		// 保存msg		inviteMessgeDao.saveMessage(msg);		// 未读数加1		FriendBean user = BGApp.getInstance().getFriendMapByName().get(Constant.NEW_FRIENDS_USERNAME);		if (user.getUnreadMsgCount() == 0)			user.setUnreadMsgCount(user.getUnreadMsgCount() + 1);	}			@Override	protected void onDestroy() {		super.onDestroy();		// 注销广播接收者		try {			mActivity.unregisterReceiver(newsMsg);		} catch (Exception e) {		}		try {			mActivity.unregisterReceiver(ackMessageReceiver);		} catch (Exception e) {		}				if (conflictBuilder != null) {			conflictBuilder.create().dismiss();			conflictBuilder = null;		}			}	/**	 * 刷新未读消息数	 */	public void updateUnreadLabel() {//		int count = getUnreadMsgCountTotal();//		if (count > 0) {//			unreadLabel.setText(String.valueOf(count));//			unreadLabel.setVisibility(View.VISIBLE);//		} else {//			unreadLabel.setVisibility(View.INVISIBLE);//		}	}	/**	 * 刷新申请与通知消息数	 */	public void updateUnreadAddressLable() {//		mActivity.runOnUiThread(new Runnable() {//			public void run() {//				int count = getUnreadAddressCountTotal();//				if (count > 0) {//					unreadAddressLable.setText(String.valueOf(count));//					unreadAddressLable.setVisibility(View.VISIBLE);//				} else {//					unreadAddressLable.setVisibility(View.INVISIBLE);//				}//			}//		});	}	/**	 * 获取未读申请与通知消息	 * 	 * @return	 */	public int getUnreadAddressCountTotal() {		int unreadAddressCountTotal = 0;		if (BGApp.getInstance().getFriendMapByName().get(Constant.NEW_FRIENDS_USERNAME) != null)			unreadAddressCountTotal = BGApp.getInstance().getFriendMapByName().get(Constant.NEW_FRIENDS_USERNAME).getUnreadMsgCount();		return unreadAddressCountTotal;	}	/**	 * 获取未读消息数	 * 	 * @return	 */	public int getUnreadMsgCountTotal() {		int unreadMsgCountTotal = 0;		unreadMsgCountTotal = EMChatManager.getInstance().getUnreadMsgsCount();		return unreadMsgCountTotal;	}	/**接受消息的广播*/	private BroadcastReceiver newsMsg = new BroadcastReceiver() {		@Override		public void onReceive(Context arg0, Intent intent) {						LogUtils.i("-------------------------------------接受消息的广播------------");						// 主页面收到消息后，主要为了提示未读，实际消息内容需要到chat页面查看			String from = intent.getStringExtra("from");			// 消息id			String msgId = intent.getStringExtra("msgid");			EMMessage message = EMChatManager.getInstance().getMessage(msgId);			// 2014-10-22 修复在某些机器上，在聊天页面对方发消息过来时不立即显示内容的bug			if (ChatActivity.activityInstance != null) {				if (message.getChatType() == ChatType.GroupChat) {										/**如果获取到的msg来源不是群成员，则需要异步获取群成员的资料，并插入到数据库与缓存中**/					hxGroupId = message.getTo();					GroupBean bean = BGApp.getInstance().getGroupMap().get(hxGroupId);					groupId = bean.roomid;										m_other_action = MSG_GROUP_NEWMESSAGE;										List<FriendBean> FriendBeans = BGApp.getInstance().getGroupMemberAndHxId().get(hxGroupId);	//获取该群组的成员					boolean hasMember = false; //是否为该群的成员					for (FriendBean f : FriendBeans) {						if(f.userid.equals(from.substring(2))){							hasMember = true;						}					}										if(!hasMember){	//获取该用户的资料，并插入本地对应的群成员数据库中						UserCenterRequest.getInstance().requestPersonInfo(MessageActivity.this, MessageActivity.this, from.substring(2), false);					}										if (message.getTo().equals("bg"+ChatActivity.activityInstance.getToChatUserId()))						return;				} else {					if (from.equals("bg"+ChatActivity.activityInstance.getToChatUserId()))						return;				}			}						// 注销广播接收者，否则在ChatActivity中会收到这个广播			abortBroadcast();						notifyNewMessage(message);			// 刷新bottom bar消息未读数			updateUnreadLabel();			if (currentTabIndex == 0) {				// 当前页面如果为聊天历史页面，刷新此页面				if (chatHistoryFragment != null) {					chatHistoryFragment.refresh();				}			}		}	};		/**	 * 消息回执BroadcastReceiver	 */	private BroadcastReceiver ackMessageReceiver = new BroadcastReceiver() {		@Override		public void onReceive(Context context, Intent intent) {						LogUtils.i("-------------------------------------消息回执的广播------------");			abortBroadcast();						String msgid = intent.getStringExtra("msgid");			String from = intent.getStringExtra("from");			EMConversation conversation = EMChatManager.getInstance().getConversation(from);			if (conversation != null) {				// 把message设为已读				EMMessage msg = conversation.getMessage(msgid);				if (msg != null) {					// 2014-11-5 修复在某些机器上，在聊天页面对方发送已读回执时不立即显示已读的bug					if (ChatActivity.activityInstance != null) {						if (msg.getChatType() == ChatType.Chat) {							if (from.equals("bg"+ChatActivity.activityInstance.getToChatUserId()))								return;						}					}					msg.isAcked = true;				}			}					}	};				/**	 * 透传消息BroadcastReceiver	 */	private BroadcastReceiver cmdMessageReceiver = new BroadcastReceiver() {		@Override		public void onReceive(Context context, Intent intent) {						LogUtils.i("-------------------------------------消息透传的广播------------");						abortBroadcast();			EMLog.d(TAG, "收到透传消息");			//获取cmd message对象			String msgId = intent.getStringExtra("msgid");			EMMessage message = intent.getParcelableExtra("message");			//获取消息body			CmdMessageBody cmdMsgBody = (CmdMessageBody) message.getBody();			String action = cmdMsgBody.action;//获取自定义action						EMLog.d(TAG, String.format("透传消息：action:%s,message:%s", action,message.toString()));			BToast.show(mActivity,  "收到透传：action："+action);		}	};	}