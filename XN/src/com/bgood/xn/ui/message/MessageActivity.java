package com.bgood.xn.ui.message;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;import java.util.UUID;import android.app.Activity;import android.content.BroadcastReceiver;import android.content.Context;import android.content.DialogInterface;import android.content.Intent;import android.content.IntentFilter;import android.os.Bundle;import android.support.v4.app.Fragment;import android.support.v4.view.ViewPager;import android.support.v4.view.ViewPager.OnPageChangeListener;import android.text.TextUtils;import android.util.Log;import android.view.View;import android.view.View.OnClickListener;import android.widget.Button;import android.widget.RadioButton;import android.widget.RadioGroup;import android.widget.RadioGroup.OnCheckedChangeListener;import com.alibaba.fastjson.JSON;import com.bgood.xn.R;import com.bgood.xn.adapter.FragmentViewPagerAdapter;import com.bgood.xn.bean.FriendBean;import com.bgood.xn.bean.GroupBean;import com.bgood.xn.bean.response.FriendAndGroupResponse;import com.bgood.xn.network.BaseNetWork;import com.bgood.xn.network.BaseNetWork.ReturnCode;import com.bgood.xn.network.http.HttpRequestAsyncTask.TaskListenerWithState;import com.bgood.xn.network.http.HttpRequestInfo;import com.bgood.xn.network.http.HttpResponseInfo;import com.bgood.xn.network.http.HttpResponseInfo.HttpTaskState;import com.bgood.xn.network.request.IMRequest;import com.bgood.xn.system.BGApp;import com.bgood.xn.ui.base.BaseActivity;import com.bgood.xn.ui.message.fragment.ChatHistoryFragment;import com.bgood.xn.ui.message.fragment.CommunicateFragment;import com.bgood.xn.ui.message.fragment.FriendListFragment;import com.bgood.xn.ui.message.fragment.GroupFragment;import com.bgood.xn.ui.user.account.LoginActivity;import com.bgood.xn.view.BToast;import com.easemob.EMConnectionListener;import com.easemob.EMError;import com.easemob.chat.CmdMessageBody;import com.easemob.chat.Constant;import com.easemob.chat.EMChat;import com.easemob.chat.EMChatManager;import com.easemob.chat.EMContactListener;import com.easemob.chat.EMContactManager;import com.easemob.chat.EMConversation;import com.easemob.chat.EMGroup;import com.easemob.chat.EMGroupManager;import com.easemob.chat.EMMessage;import com.easemob.chat.EMMessage.ChatType;import com.easemob.chat.EMMessage.Type;import com.easemob.chat.EMNotifier;import com.easemob.chat.GroupChangeListener;import com.easemob.chat.TextMessageBody;import com.easemob.chat.activity.ChatActivity;import com.easemob.chat.db.InviteMessgeDao;import com.easemob.chat.domain.InviteMessage;import com.easemob.chat.domain.InviteMessage.InviteMesageStatus;import com.easemob.chat.domain.User;import com.easemob.util.EMLog;import com.easemob.util.HanziToPinyin;import com.easemob.util.NetUtils;/** * @todo:聊天主界面 * @author:hg_liuzl@163.com */public class MessageActivity extends BaseActivity implements OnCheckedChangeListener,OnClickListener,TaskListenerWithState {		/**添加好友*/	public static final int MSG_FRIEND_ADD = 1;				/**登录操作码**/	private static final int CODE_LOGIN = 100;		public static final int MESSAGE_MAIN = 0;	public static final int MESSAGE_FRIEND = 1;	public static final int MESSAGE_GROUP = 2;	public static final int MESSAGE_COMMUNICATION_HALL = 3;		private int messageCheckType = 0;	private RadioGroup radioGroup;	private RadioButton rbHistory,rbFriend,rbGroup,rbCommunit;	private Button btnAdd;	private ViewPager mTabPager;//页卡内容		private ArrayList<Fragment> fragmentList;	private int index;	// 当前fragment的index	private int currentTabIndex;		private ChatHistoryFragment chatHistoryFragment;	private FriendListFragment contactListFragment;	private GroupFragment groupFragment;	private CommunicateFragment communicateFragment;	private Activity mActivity = null;		// 账号在别处登录	public boolean isConflict = false;		/**是否有加载过数据*/	public boolean isFirst = true;		@Override	protected void onCreate(Bundle savedInstanceState) {		super.onCreate(savedInstanceState);		if (savedInstanceState != null && savedInstanceState.getBoolean("isConflict", false)) {            // 防止被T后，没点确定按钮然后按了home键，长期在后台又进app导致的crash            // 三个fragment里加的判断同理            finish();            startActivity(new Intent(this, LoginActivity.class));            return;        }		mActivity = this;		setContentView(R.layout.layout_message_main);				doLoadData();	}		private void doLoadData() {		if (BGApp.isUserLogin) {			doLoadIMData();		} else {			Intent intent = new Intent(mActivity, LoginActivity.class);			intent.putExtra(LoginActivity.FROM_KEY,LoginActivity.FROM_KEY_OTHER);			mActivity.startActivityForResult(intent, CODE_LOGIN);		}	}		/**	 * 	 * @todo:加载聊天内容与好友，以及群	 * @date:2014-12-27 上午11:42:49	 * @author:hg_liuzl@163.com	 * @params:	 */	private void doLoadIMData(){		if (BGApp.getInstance().isLogin()) {			try {				/** 加载聊天记录 */				EMChatManager.getInstance().loadAllConversations();				refreshFriendAndGroup();//				/** 获取好友与群聊表 *///				if (!pUitl.hasInitFriendAndGroup()) {//					IMRequest.getInstance().requestContactsList(this,mActivity);//				}//				else{//					initIMData();//				}							} catch (Exception e) {				e.printStackTrace();			}		}	}		/**	 * 	 * @todo:刷新好友列表与群列表	 * @date:2014-12-27 上午11:41:36	 * @author:hg_liuzl@163.com	 * @params:	 */	private void refreshFriendAndGroup() {		/** 获取好友与群聊表 */		if (!pUitl.hasInitFriendAndGroup()) {			//初始化的时候，需要添加进度条，后面刷新的时候不需要进度条，保证用户体验			IMRequest.getInstance().requestContactsList(this,mActivity,isFirst);		}	}	/*	private void initIMData() {		List<FriendBean> friends = FriendBean.queryFriendBean(dbHelper);				Map<String, FriendBean> userlist = new HashMap<String, FriendBean>();		Map<String, FriendBean> userAndIdMap = FriendBean.queryFriendBeanAndID(dbHelper);				for (FriendBean fb : friends) {			setUserHearder(fb.name, fb);			userlist.put(fb.name, fb);		}				// 添加user"申请与通知"		FriendBean newFriends = new FriendBean();		newFriends.setName(Constant.NEW_FRIENDS_USERNAME);		newFriends.setNick("申请与通知");		newFriends.setHeader("");		userlist.put(Constant.NEW_FRIENDS_USERNAME, newFriends);		// 存入内存		BGApp.getInstance().setFriendMap(userlist);		BGApp.getInstance().setGroupMap(GroupBean.queryGroupBeanByType(dbHelper, 0));		BGApp.getInstance().setTempMap(GroupBean.queryGroupBeanByType(dbHelper, 1));			initViews();			}*/			/**	 * 	 * @todo:处理群，以及好友	 * @date:2014-12-27 上午11:43:19	 * @author:hg_liuzl@163.com	 * @params:@param friends	 * @params:@param listGroup	 */	private void dealIMFriendAndGroup(List<FriendBean> friends,List<GroupBean> listGroup) {		Map<String, FriendBean> userAndNameMap = new HashMap<String, FriendBean>();		Map<String, FriendBean> userAndIdMap = new HashMap<String, FriendBean>();				for (FriendBean fb : friends) {			setUserHearder(fb.name, fb);			userAndNameMap.put(fb.name, fb);			userAndIdMap.put(fb.userid, fb);		}				// 添加user"申请与通知"		FriendBean newFriends = new FriendBean();		newFriends.setName(Constant.NEW_FRIENDS_USERNAME);		newFriends.setNick("申请与通知");		newFriends.setHeader("");		userAndNameMap.put(Constant.NEW_FRIENDS_USERNAME, newFriends);				// 好友存入内存		BGApp.getInstance().setFriendMapById(userAndIdMap);		BGApp.getInstance().setFriendMapByName(userAndNameMap);						Map<String, GroupBean> groupMap = new HashMap<String, GroupBean>();		Map<String, GroupBean> tempMap = new HashMap<String, GroupBean>();				for(GroupBean g:listGroup){						if("0".equals(g.grouptype)){	//固定群				groupMap.put(g.hxgroupid, g);			}else{ //临时群				tempMap.put(g.hxgroupid, g);			}		}		BGApp.getInstance().setGroupMap(groupMap);		BGApp.getInstance().setTempMap(tempMap);						initViews();	}			@Override	public void onActivityResult(int requestCode, int resultCode, Intent data) {		super.onActivityResult(requestCode, resultCode, data);		if(requestCode == CODE_LOGIN && resultCode == Activity.RESULT_OK){			doLoadIMData();		}else if(requestCode == CODE_LOGIN && resultCode == Activity.RESULT_CANCELED){			finish();		}	}		/**	 * 初始化tabhost	 */	private void initViews()	{		if(isFirst){			isFirst = false;		}else{			return;		}				inviteMessgeDao = new InviteMessgeDao(mActivity);		btnAdd = (Button) findViewById(R.id.b_message_main_add);		btnAdd.setOnClickListener(this);		radioGroup = (RadioGroup) findViewById(R.id.rg_message_main_tab);		radioGroup.setOnCheckedChangeListener(this);				rbHistory = (RadioButton) findViewById(R.id.message_main_tab_messagecenter);		rbFriend = (RadioButton) findViewById(R.id.message_main_tab_friend);		rbGroup = (RadioButton) findViewById(R.id.message_main_tab_group);		rbCommunit = (RadioButton) findViewById(R.id.message_main_tab_communication_hall);				//		unreadLabel = (TextView) layout.findViewById(R.id.unread_msg_number);//		unreadAddressLable = (TextView) layout.findViewById(R.id.unread_address_number);				initPaper();		initIM();	}				private void initPaper() {		mTabPager = (ViewPager)findViewById(R.id.fragment_paper);		fragmentList = new ArrayList<Fragment>();				chatHistoryFragment = new ChatHistoryFragment();	    contactListFragment = new FriendListFragment();	    groupFragment = new GroupFragment();	    communicateFragment = new CommunicateFragment();				fragmentList.add(chatHistoryFragment);		fragmentList.add(contactListFragment);		fragmentList.add(groupFragment);		fragmentList.add(communicateFragment);	    new FragmentViewPagerAdapter(this.getSupportFragmentManager(), mTabPager,fragmentList);	    mTabPager.setOnPageChangeListener(new ViewPagerListener());	}		@Override	public void onCheckedChanged(RadioGroup group, int checkedId)	{		switch (checkedId)		{		case R.id.message_main_tab_messagecenter:			messageCheckType = MESSAGE_MAIN;			btnAdd.setVisibility(View.INVISIBLE);			index = 0;			break;		case R.id.message_main_tab_friend:			messageCheckType = MESSAGE_FRIEND;			btnAdd.setVisibility(View.VISIBLE);			index = 1;			break;		case R.id.message_main_tab_group:			messageCheckType = MESSAGE_GROUP;			btnAdd.setVisibility(View.VISIBLE);			index = 2;			break;		case R.id.message_main_tab_communication_hall:			btnAdd.setVisibility(View.INVISIBLE);			messageCheckType = MESSAGE_COMMUNICATION_HALL;			index = 3;			break;		}		currentTabIndex = index;		mTabPager.setCurrentItem(index);	}		class ViewPagerListener implements OnPageChangeListener {		@Override		public void onPageScrollStateChanged(int arg0) {		}		@Override		public void onPageScrolled(int arg0, float arg1, int arg2) {		}		@Override		public void onPageSelected(int index) {			if (index == 0) {				rbHistory.setChecked(true);			} else if (index == 1) {				rbFriend.setChecked(true);			} else if (index == 2) {				rbGroup.setChecked(true);			}else if (index == 3) {				rbCommunit.setChecked(true);			}			mTabPager.setCurrentItem(index);		}	}		@Override	public void onClick(View v) {		Intent intent = null;		switch (v.getId()) {		case R.id.b_message_main_add:						if(messageCheckType == MESSAGE_FRIEND){	//添加好友				intent = new Intent(mActivity,AddFriendActivity.class);				startActivity(intent);							}else if(messageCheckType == MESSAGE_GROUP){//添加群组				intent = new Intent(mActivity,AddGroupActivity.class);				startActivity(intent);			}			break;		default:			break;		}	}			@Override	public void onTaskOver(HttpRequestInfo request, HttpResponseInfo info) {		if(info.getState() == HttpTaskState.STATE_OK){			BaseNetWork bNetWork = info.getmBaseNetWork();			String json = bNetWork.getStrJson();			if(bNetWork.getReturnCode() == ReturnCode.RETURNCODE_OK){				switch (bNetWork.getMessageType()) {				case 850006:					FriendAndGroupResponse response = JSON.parseObject(json, FriendAndGroupResponse.class);	//				GroupBean.storeGroupBean(dbHelper, response.fixrooms);	//				FriendBean.storeFriendBean(dbHelper, response.groups.get(0).items);					dealIMFriendAndGroup(response.groups.get(0).items,response.fixrooms);										if(!isFirst){						// 刷新好友列表						if (currentTabIndex == 1)							contactListFragment.refresh();					}										break;				case 850008:										break;				case 850027:					refreshFriendAndGroup();					break;				default:					break;				}			}		}	}		/**	 * 设置hearder属性，方便通讯中对联系人按header分类显示，以及通过右侧ABCD...字母栏快速定位联系人	 * @param username	 * @param user	 */	protected void setUserHearder(String name, FriendBean friend) {		String headerName = null;		if (!TextUtils.isEmpty(friend.getNick())) {			headerName = friend.getNick();		} else {			headerName = friend.getName();		}				if(headerName== null)		{			return;		}						if (Constant.NEW_FRIENDS_USERNAME.equals(name)) {			friend.setHeader("");		} else if (Character.isDigit(headerName.charAt(0))) {			friend.setHeader("#");		} else {			friend.setHeader(HanziToPinyin.getInstance().get(headerName.substring(0, 1)).get(0).target.substring(0, 1).toUpperCase());			char header = friend.getHeader().toLowerCase().charAt(0);			if (header < 'a' || header > 'z') {				friend.setHeader("#");			}		}	}						/***********************************************************环信通讯部分*************************************************************/		private NewMessageBroadcastReceiver msgReceiver;		protected static final String TAG = "MainActivity";//	// 未读消息textview//	private TextView unreadLabel;//	// 未读通讯录textview//	private TextView unreadAddressLable;		private void initIM() {		// 注册一个接收消息的BroadcastReceiver		msgReceiver = new NewMessageBroadcastReceiver();		IntentFilter intentFilter = new IntentFilter(EMChatManager.getInstance().getNewMessageBroadcastAction());		intentFilter.setPriority(3);		mActivity.registerReceiver(msgReceiver, intentFilter);		// 注册一个ack回执消息的BroadcastReceiver		IntentFilter ackMessageIntentFilter = new IntentFilter(EMChatManager.getInstance().getAckMessageBroadcastAction());		ackMessageIntentFilter.setPriority(3);		mActivity.registerReceiver(ackMessageReceiver, ackMessageIntentFilter);				//注册一个透传消息的BroadcastReceiver		IntentFilter cmdMessageIntentFilter = new IntentFilter(EMChatManager.getInstance().getCmdMessageBroadcastAction());		cmdMessageIntentFilter.setPriority(3);		mActivity.registerReceiver(cmdMessageReceiver, cmdMessageIntentFilter);						// 注册一个离线消息的BroadcastReceiver		// IntentFilter offlineMessageIntentFilter = new		// IntentFilter(EMChatManager.getInstance()		// .getOfflineMessageBroadcastAction());		// registerReceiver(offlineMessageReceiver, offlineMessageIntentFilter);		// setContactListener监听联系人的变化等		EMContactManager.getInstance().setContactListener(new MyContactListener());		// 注册一个监听连接状态的listener		EMChatManager.getInstance().addConnectionListener(new MyConnectionListener());		// 注册群聊相关的listener		EMGroupManager.getInstance().addGroupChangeListener(new MyGroupChangeListener());		// 通知sdk，UI 已经初始化完毕，注册了相应的receiver和listener, 可以接受broadcast了		EMChat.getInstance().setAppInited();	}	/**	 * 连接监听listener	 * 	 */	private class MyConnectionListener implements EMConnectionListener {		@Override		public void onConnected() {			mActivity.runOnUiThread(new Runnable() {				@Override				public void run() {					chatHistoryFragment.errorText.setVisibility(View.GONE);				}			});		}		@Override		public void onDisconnected(final int error) {			mActivity.runOnUiThread(new Runnable() {				@Override				public void run() {					if (error == EMError.CONNECTION_CONFLICT) {						// 显示帐号在其他设备登陆dialog						showConflictDialog();					} else {						chatHistoryFragment.errorItem.setVisibility(View.VISIBLE);						if (NetUtils.hasNetwork(mActivity))							chatHistoryFragment.errorText.setText("连接不到聊天服务器");						else							chatHistoryFragment.errorText.setText("当前网络不可用，请检查网络设置");					}				}			});		}	}		private android.app.AlertDialog.Builder conflictBuilder;	private boolean isConflictDialogShow;		/**	 * 显示帐号在别处登录dialog	 */	private void showConflictDialog() {		isConflictDialogShow = true;		BGApp.getInstance().logout(null);		if (!MessageActivity.this.isFinishing()) {			// clear up global variables			try {				if (conflictBuilder == null)					conflictBuilder = new android.app.AlertDialog.Builder(MessageActivity.this);					conflictBuilder.setTitle("下线通知");					conflictBuilder.setMessage(R.string.connect_conflict);					conflictBuilder.setPositiveButton(R.string.ok, new DialogInterface.OnClickListener() {					@Override					public void onClick(DialogInterface dialog, int which) {						dialog.dismiss();						conflictBuilder = null;						finish();						startActivity(new Intent(MessageActivity.this, LoginActivity.class));					}				});				conflictBuilder.setCancelable(false);				conflictBuilder.create().show();				isConflict = true;			} catch (Exception e) {				EMLog.e(TAG, "---------color conflictBuilder error" + e.getMessage());			}		}	}		/**	 * 	 * @todo:监听群组消息	 * @date:2014-12-27 下午3:16:03	 * @author:hg_liuzl@163.com	 */	private class MyGroupChangeListener implements GroupChangeListener {		@Override		public void onInvitationReceived(String groupId, String groupName, String inviter, String reason) {			boolean hasGroup = false;			for (EMGroup group : EMGroupManager.getInstance().getAllGroups()) {				if (group.getGroupId().equals(groupId)) {					hasGroup = true;					break;				}			}			if (!hasGroup)				return;			// 被邀请			EMMessage msg = EMMessage.createReceiveMessage(Type.TXT);			msg.setChatType(ChatType.GroupChat);			msg.setFrom(inviter);			msg.setTo(groupId);			msg.setMsgId(UUID.randomUUID().toString());			msg.addBody(new TextMessageBody(inviter + "邀请你加入了群聊"));			// 保存邀请消息			EMChatManager.getInstance().saveMessage(msg);			// 提醒新消息			EMNotifier.getInstance(mActivity.getApplicationContext()).notifyOnNewMsg();			mActivity.runOnUiThread(new Runnable() {				public void run() {					updateUnreadLabel();					// 刷新ui					if (currentTabIndex == 0)						chatHistoryFragment.refresh();											groupFragment.onResume();				}			});		}		@Override		public void onInvitationAccpted(String groupId, String inviter, String reason) {		}		@Override		public void onInvitationDeclined(String groupId, String invitee, String reason) {		}		@Override		public void onUserRemoved(String groupId, String groupName) {			// 提示用户被T了，demo省略此步骤			// 刷新ui			mActivity.runOnUiThread(new Runnable() {				public void run() {					try {						updateUnreadLabel();						if (currentTabIndex == 0){							chatHistoryFragment.refresh();						}else if(currentTabIndex == 1){														contactListFragment.onResume();						}else if(currentTabIndex == 2){							groupFragment.onResume();													}																	} catch (Exception e) {						EMLog.e(TAG, "refresh exception " + e.getMessage());					}				}			});		}		@Override		public void onGroupDestroy(String groupId, String groupName) {			// 群被解散			// 提示用户群被解散,demo省略			// 刷新ui			mActivity.runOnUiThread(new Runnable() {				public void run() {					updateUnreadLabel();					// 刷新ui					if (currentTabIndex == 0){						chatHistoryFragment.refresh();					}else if(currentTabIndex == 2){						groupFragment.onResume();					}				}			});		}		@Override		public void onApplicationReceived(String groupId, String groupName, String applyer, String reason) {			// 用户申请加入群聊			InviteMessage msg = new InviteMessage();			msg.setFrom(applyer);			msg.setTime(System.currentTimeMillis());			msg.setGroupId(groupId);			msg.setGroupName(groupName);			msg.setReason(reason);			Log.d(TAG, applyer + " 申请加入群聊：" + groupName);			msg.setStatus(InviteMesageStatus.BEAPPLYED);			notifyNewIviteMessage(msg);		}		@Override		public void onApplicationAccept(String groupId, String groupName, String accepter) {			// 加群申请被同意			EMMessage msg = EMMessage.createReceiveMessage(Type.TXT);			msg.setChatType(ChatType.GroupChat);			msg.setFrom(accepter);			msg.setTo(groupId);			msg.setMsgId(UUID.randomUUID().toString());			msg.addBody(new TextMessageBody(accepter + "同意了你的群聊申请"));			// 保存同意消息			EMChatManager.getInstance().saveMessage(msg);			// 提醒新消息			EMNotifier.getInstance(mActivity.getApplicationContext()).notifyOnNewMsg();			mActivity.runOnUiThread(new Runnable() {				public void run() {					updateUnreadLabel();					// 刷新ui					if (currentTabIndex == 0){						chatHistoryFragment.refresh();					}else if(currentTabIndex == 2){						groupFragment.onResume();					}				}			});		}		@Override		public void onApplicationDeclined(String groupId, String groupName, String decliner, String reason) {			// 加群申请被拒绝，demo未实现		}	}			/**	 * set head	 * 	 * @param username	 * @return	 */	FriendBean setUserHead(String username) {		FriendBean user = new FriendBean();		user.setName(username);		String headerName = null;		if (!TextUtils.isEmpty(user.getNick())) {			headerName = user.getNick();		} else {			headerName = user.getName();		}		if (username.equals(Constant.NEW_FRIENDS_USERNAME)) {			user.setHeader("");		} else if (Character.isDigit(headerName.charAt(0))) {			user.setHeader("#");		} else {			user.setHeader(HanziToPinyin.getInstance().get(headerName.substring(0, 1)).get(0).target.substring(0, 1).toUpperCase());			char header = user.getHeader().toLowerCase().charAt(0);			if (header < 'a' || header > 'z') {				user.setHeader("#");			}		}		return user;	}	private InviteMessgeDao inviteMessgeDao;		/**	 * 	 * @todo:监听好友变化	 * @date:2014-12-27 下午3:16:38	 * @author:hg_liuzl@163.com	 */	private class MyContactListener implements EMContactListener {		@Override		public void onContactAdded(List<String> userIdList) {						List<String> toAddList = new ArrayList<String>();	//存放存储的userId						for (String userId : userIdList) {				if(!toAddList.contains(userId)){					toAddList.add(userId);					String id = userId.substring(2);	//截取bg后面编号					IMRequest.getInstance().requestFriendADD(MessageActivity.this, mActivity, BGApp.mUserId, id);				}			}		}		/**被删除**/		@Override		public void onContactDeleted(final List<String> userIdList) {						Map<String, FriendBean> localUsers = BGApp.getInstance().getFriendMapById();						for (String userId : userIdList) {				FriendBean fb = localUsers.get(userId);				localUsers.remove(userId);				inviteMessgeDao.deleteMessage(fb.name);				IMRequest.getInstance().requestFriendDelete(MessageActivity.this, mActivity, userId);			}						mActivity.runOnUiThread(new Runnable() {				public void run() {					// 如果正在与此用户的聊天页面					if (ChatActivity.activityInstance != null && userIdList.contains(ChatActivity.activityInstance.getToChatUserId())) {												BToast.show(mActivity, ChatActivity.activityInstance.friendBean.name + "已把你从他好友列表里移除");												ChatActivity.activityInstance.finish();					}					updateUnreadLabel();					// 刷新ui					if (currentTabIndex == 1)						contactListFragment.refresh();					else if(currentTabIndex == 0)						chatHistoryFragment.refresh();				}			});				}		/**请求添加为好友*/		@Override		public void onContactInvited(String userId, String reason) {			// 接到邀请的消息，如果不处理(同意或拒绝)，掉线后，服务器会自动再发过来，所以客户端不需要重复提醒			List<InviteMessage> msgs = inviteMessgeDao.getMessagesList();			for (InviteMessage inviteMessage : msgs) {				if (inviteMessage.getGroupId() == null && inviteMessage.getFrom().equals(userId)) {					inviteMessgeDao.deleteMessage(userId);				}			}									// 自己封装的javabean			InviteMessage msg = new InviteMessage();			msg.setFrom(userId);			msg.setTime(System.currentTimeMillis());			msg.setReason(reason);			Log.d(TAG, userId + "请求加你为好友,reason: " + reason);			// 设置相应status			msg.setStatus(InviteMesageStatus.BEINVITEED);			notifyNewIviteMessage(msg);		}		/**对方同意 **/		@Override		public void onContactAgreed(String userId) {			List<InviteMessage> msgs = inviteMessgeDao.getMessagesList();			for (InviteMessage inviteMessage : msgs) {				if (inviteMessage.getFrom().equals(userId)) {					return;				}			}			// 自己封装的javabean			InviteMessage msg = new InviteMessage();			msg.setFrom(userId);			msg.setTime(System.currentTimeMillis());			msg.setStatus(InviteMesageStatus.BEAGREED);			notifyNewIviteMessage(msg);		}		/**被拒绝**/		@Override		public void onContactRefused(String userId) {			Log.d(userId, userId + "拒绝了你的好友请求");					// 接到邀请的消息，如果不处理(同意或拒绝)，掉线后，服务器会自动再发过来，所以客户端不需要重复提醒			List<InviteMessage> msgs = inviteMessgeDao.getMessagesList();			for (InviteMessage inviteMessage : msgs) {				if (inviteMessage.getGroupId() == null && inviteMessage.getFrom().equals(userId)) {					inviteMessgeDao.deleteMessage(userId);				}			}			// 自己封装的javabean			InviteMessage msg = new InviteMessage();			msg.setFrom(userId);			msg.setTime(System.currentTimeMillis());			// 设置相应status			msg.setStatus(InviteMesageStatus.BEREFUSED);			notifyNewIviteMessage(msg);		}	}	/**	 * 保存提示新消息	 * 	 * @param msg	 */	private void notifyNewIviteMessage(InviteMessage msg) {		saveInviteMsg(msg);		// 提示有新消息		EMNotifier.getInstance(mActivity.getApplicationContext()).notifyOnNewMsg();		// 刷新bottom bar消息未读数		updateUnreadAddressLable();		// 刷新好友页面ui		if (currentTabIndex == 1)			contactListFragment.refresh();	}	/**	 * 保存邀请等msg	 * 	 * @param msg	 */	private void saveInviteMsg(InviteMessage msg) {		// 保存msg		inviteMessgeDao.saveMessage(msg);		// 未读数加1		FriendBean user = BGApp.getInstance().getFriendMapByName().get(Constant.NEW_FRIENDS_USERNAME);		if (user.getUnreadMsgCount() == 0)			user.setUnreadMsgCount(user.getUnreadMsgCount() + 1);	}			@Override	protected void onDestroy() {		super.onDestroy();		// 注销广播接收者		try {			mActivity.unregisterReceiver(msgReceiver);		} catch (Exception e) {		}		try {			mActivity.unregisterReceiver(ackMessageReceiver);		} catch (Exception e) {		}				if (conflictBuilder != null) {			conflictBuilder.create().dismiss();			conflictBuilder = null;		}			}	/**	 * 刷新未读消息数	 */	public void updateUnreadLabel() {//		int count = getUnreadMsgCountTotal();//		if (count > 0) {//			unreadLabel.setText(String.valueOf(count));//			unreadLabel.setVisibility(View.VISIBLE);//		} else {//			unreadLabel.setVisibility(View.INVISIBLE);//		}	}	/**	 * 刷新申请与通知消息数	 */	public void updateUnreadAddressLable() {//		mActivity.runOnUiThread(new Runnable() {//			public void run() {//				int count = getUnreadAddressCountTotal();//				if (count > 0) {//					unreadAddressLable.setText(String.valueOf(count));//					unreadAddressLable.setVisibility(View.VISIBLE);//				} else {//					unreadAddressLable.setVisibility(View.INVISIBLE);//				}//			}//		});	}	/**	 * 获取未读申请与通知消息	 * 	 * @return	 */	public int getUnreadAddressCountTotal() {		int unreadAddressCountTotal = 0;		if (BGApp.getInstance().getFriendMapByName().get(Constant.NEW_FRIENDS_USERNAME) != null)			unreadAddressCountTotal = BGApp.getInstance().getFriendMapByName().get(Constant.NEW_FRIENDS_USERNAME).getUnreadMsgCount();		return unreadAddressCountTotal;	}	/**	 * 获取未读消息数	 * 	 * @return	 */	public int getUnreadMsgCountTotal() {		int unreadMsgCountTotal = 0;		unreadMsgCountTotal = EMChatManager.getInstance().getUnreadMsgsCount();		return unreadMsgCountTotal;	}	/**	 * 新消息广播接收者	 * 	 * 	 */	private class NewMessageBroadcastReceiver extends BroadcastReceiver {		@Override		public void onReceive(Context context, Intent intent) {			// 主页面收到消息后，主要为了提示未读，实际消息内容需要到chat页面查看			String from = intent.getStringExtra("from");			// 消息id			String msgId = intent.getStringExtra("msgid");			EMMessage message = EMChatManager.getInstance().getMessage(msgId);			// 2014-10-22 修复在某些机器上，在聊天页面对方发消息过来时不立即显示内容的bug			if (ChatActivity.activityInstance != null) {				if (message.getChatType() == ChatType.GroupChat) {					if (message.getTo().equals("bg"+ChatActivity.activityInstance.getToChatUserId()))						return;				} else {					if (from.equals("bg"+ChatActivity.activityInstance.getToChatUserId()))						return;				}			}						// 注销广播接收者，否则在ChatActivity中会收到这个广播			abortBroadcast();						notifyNewMessage(message);			// 刷新bottom bar消息未读数			updateUnreadLabel();			if (currentTabIndex == 0) {				// 当前页面如果为聊天历史页面，刷新此页面				if (chatHistoryFragment != null) {					chatHistoryFragment.refresh();				}			}		}	}	/**	 * 消息回执BroadcastReceiver	 */	private BroadcastReceiver ackMessageReceiver = new BroadcastReceiver() {		@Override		public void onReceive(Context context, Intent intent) {			abortBroadcast();						String msgid = intent.getStringExtra("msgid");			String from = intent.getStringExtra("from");			EMConversation conversation = EMChatManager.getInstance().getConversation(from);			if (conversation != null) {				// 把message设为已读				EMMessage msg = conversation.getMessage(msgid);				if (msg != null) {					// 2014-11-5 修复在某些机器上，在聊天页面对方发送已读回执时不立即显示已读的bug					if (ChatActivity.activityInstance != null) {						if (msg.getChatType() == ChatType.Chat) {							if (from.equals("bg"+ChatActivity.activityInstance.getToChatUserId()))								return;						}					}					msg.isAcked = true;				}			}					}	};				/**	 * 透传消息BroadcastReceiver	 */	private BroadcastReceiver cmdMessageReceiver = new BroadcastReceiver() {		@Override		public void onReceive(Context context, Intent intent) {			abortBroadcast();			EMLog.d(TAG, "收到透传消息");			//获取cmd message对象			String msgId = intent.getStringExtra("msgid");			EMMessage message = intent.getParcelableExtra("message");			//获取消息body			CmdMessageBody cmdMsgBody = (CmdMessageBody) message.getBody();			String action = cmdMsgBody.action;//获取自定义action						EMLog.d(TAG, String.format("透传消息：action:%s,message:%s", action,message.toString()));			BToast.show(mActivity,  "收到透传：action："+action);		}	};	}