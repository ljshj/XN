package com.bgood.xn.ui;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;import android.os.Bundle;import android.support.v4.app.Fragment;import android.support.v4.app.FragmentActivity;import android.support.v4.app.FragmentManager;import android.support.v4.app.FragmentPagerAdapter;import android.support.v4.app.FragmentTabHost;import android.support.v4.view.ViewPager;import android.support.v4.view.ViewPager.OnPageChangeListener;import android.text.TextUtils;import android.util.DisplayMetrics;import android.view.KeyEvent;import android.widget.RadioButton;import android.widget.RadioGroup;import android.widget.RadioGroup.OnCheckedChangeListener;import android.widget.TabHost.OnTabChangeListener;import android.widget.TabHost.TabSpec;import android.widget.Toast;import com.alibaba.fastjson.JSON;import com.bgood.xn.R;import com.bgood.xn.bean.ApkBean;import com.bgood.xn.network.BaseNetWork;import com.bgood.xn.network.BaseNetWork.ReturnCode;import com.bgood.xn.network.http.HttpRequestInfo;import com.bgood.xn.network.http.HttpResponseInfo;import com.bgood.xn.network.http.HttpRequestAsyncTask.TaskListenerWithState;import com.bgood.xn.network.http.HttpResponseInfo.HttpTaskState;import com.bgood.xn.network.request.UserCenterRequest;import com.bgood.xn.system.BGApp;import com.bgood.xn.ui.home.HomeFragment;import com.bgood.xn.ui.message.MessageFragment;import com.bgood.xn.ui.user.UserCenterFragment;import com.bgood.xn.ui.user.account.LoginActivity;import com.bgood.xn.ui.weiqiang.WeiqiangFragment;import com.bgood.xn.ui.xuanneng.XuannengFragment;import com.bgood.xn.utils.update.UpdateManager;import com.bgood.xn.view.BToast;import com.bgood.xn.view.LoadingProgress;import com.easemob.EMCallBack;import com.easemob.chat.Constant;import com.easemob.chat.EMChatManager;import com.easemob.chat.EMContactManager;import com.easemob.chat.EMGroupManager;import com.easemob.chat.db.UserDao;import com.easemob.chat.domain.User;import com.easemob.util.EMLog;import com.easemob.util.HanziToPinyin;/** *  * @todo:主界面 * @date:2014-12-4 下午5:10:25 * @author:hg_liuzl@163.com */public class MainActivity extends FragmentActivity implements TaskListenerWithState{	private RadioGroup rg;	private RadioButton homeBtn,msgBtn,weiqiangBtn,xuanBtn,userBtn;	private FragmentTabHost mFragmentTabhost;	public static final String SHOW_OF_FIRST_TAG = "first";	public static final String SHOW_OF_SECOND_TAG = "second";	public static final String SHOW_OF_THIRD_TAG = "third";	public static final String SHOW_OF_FOUR_TAG = "four";	public static final String SHOW_OF_FIVE_TAG = "five";	private List<Fragment> list = new ArrayList<Fragment>();	private ViewPager mViewPager;	@Override	protected void onCreate(Bundle savedInstanceState) {		super.onCreate(savedInstanceState);		DisplayMetrics metrics = new DisplayMetrics();		getWindowManager().getDefaultDisplay().getMetrics(metrics);		setContentView(R.layout.activity_main);				doIMLogin();		//检查新版本	//	UserCenterRequest.getInstance().requestCheckVesion(this, this);				mFragmentTabhost = (FragmentTabHost) findViewById(android.R.id.tabhost);		rg = (RadioGroup) findViewById(R.id.main_tab_group);		homeBtn = (RadioButton) findViewById(R.id.main_tab_home);		msgBtn = (RadioButton) findViewById(R.id.main_tab_communication);		weiqiangBtn = (RadioButton) findViewById(R.id.main_tab_weiqiang);		xuanBtn = (RadioButton) findViewById(R.id.main_tab_xuanneng);		userBtn = (RadioButton) findViewById(R.id.main_tab_me);		mViewPager = (ViewPager) findViewById(R.id.pager);		mFragmentTabhost.setup(this, getSupportFragmentManager(), R.id.pager);		TabSpec tabSpec0 = mFragmentTabhost.newTabSpec(SHOW_OF_FIRST_TAG).setIndicator("0");		TabSpec tabSpec1 = mFragmentTabhost.newTabSpec(SHOW_OF_SECOND_TAG).setIndicator("1");		TabSpec tabSpec2 = mFragmentTabhost.newTabSpec(SHOW_OF_THIRD_TAG).setIndicator("2");		TabSpec tabSpec3 = mFragmentTabhost.newTabSpec(SHOW_OF_FOUR_TAG).setIndicator("3");		TabSpec tabSpec4 = mFragmentTabhost.newTabSpec(SHOW_OF_FIVE_TAG).setIndicator("4");		mFragmentTabhost.addTab(tabSpec0, HomeFragment.class, null);		mFragmentTabhost.addTab(tabSpec1, MessageFragment.class, null);		mFragmentTabhost.addTab(tabSpec2, WeiqiangFragment.class, null);		mFragmentTabhost.addTab(tabSpec3, XuannengFragment.class, null);		mFragmentTabhost.addTab(tabSpec4, UserCenterFragment.class, null);		rg.setOnCheckedChangeListener(new OnCheckedChangeListener() {			@Override			public void onCheckedChanged(RadioGroup group, int checkedId) {				// TODO Auto-generated method stub				switch (checkedId) {				case R.id.main_tab_home:					mFragmentTabhost.setCurrentTabByTag(SHOW_OF_FIRST_TAG);					break;				case R.id.main_tab_communication:					mFragmentTabhost.setCurrentTabByTag(SHOW_OF_SECOND_TAG);					break;				case R.id.main_tab_weiqiang:					mFragmentTabhost.setCurrentTabByTag(SHOW_OF_THIRD_TAG);					break;				case R.id.main_tab_xuanneng:					mFragmentTabhost.setCurrentTabByTag(SHOW_OF_FOUR_TAG);					break;				case R.id.main_tab_me:					mFragmentTabhost.setCurrentTabByTag(SHOW_OF_FIVE_TAG);					break;				default:					break;				}			}		});		mFragmentTabhost.setOnTabChangedListener(new OnTabChangeListener() {			@Override			public void onTabChanged(String tabId) {				int position = mFragmentTabhost.getCurrentTab();				mViewPager.setCurrentItem(position);			}		});		mFragmentTabhost.setCurrentTab(0);		HomeFragment p1 = new HomeFragment();		MessageFragment p2 = new MessageFragment();		WeiqiangFragment p3 = new WeiqiangFragment();		XuannengFragment p4 = new XuannengFragment();		UserCenterFragment p5 = new UserCenterFragment();		list.add(p1);		list.add(p2);		list.add(p3);		list.add(p4);		list.add(p5);		mViewPager.setAdapter(new MenuAdapter(getSupportFragmentManager()));		mViewPager.setOnPageChangeListener(new ViewPagerListener());	}	class MenuAdapter extends FragmentPagerAdapter {		public MenuAdapter(FragmentManager fm) {			super(fm);		}		@Override		public Fragment getItem(int arg0) {			return list.get(arg0);		}		@Override		public int getCount() {			return list.size();		}	}	class ViewPagerListener implements OnPageChangeListener {		@Override		public void onPageScrollStateChanged(int arg0) {		}		@Override		public void onPageScrolled(int arg0, float arg1, int arg2) {		}		@Override		public void onPageSelected(int index) {			if (index == 0) {				homeBtn.setChecked(true);			} else if (index == 1) {				msgBtn.setChecked(true);			} else if (index == 2) {				weiqiangBtn.setChecked(true);			}else if (index == 3) {				xuanBtn.setChecked(true);			}else if (index == 4) {				userBtn.setChecked(true);			}			mFragmentTabhost.setCurrentTab(index);		}	}					private long exitTime = 0;// 监听用户按返回键        @Override    public boolean onKeyDown(int keyCode, KeyEvent event) {    	if(keyCode == KeyEvent.KEYCODE_BACK){    		if ((System.currentTimeMillis() - exitTime) > 2000) {				Toast.makeText(MainActivity.this, "再按一次退出程序",Toast.LENGTH_SHORT).show();				exitTime = System.currentTimeMillis();				return true;			} else {				BGApp.finishAllActivity();				finish();			}			return false;    	}    	return super.onKeyDown(keyCode, event);    }        @Override	public void onTaskOver(HttpRequestInfo request, HttpResponseInfo info) {		if(info.getState() == HttpTaskState.STATE_OK){			BaseNetWork bNetWork = info.getmBaseNetWork();			String strJson = bNetWork.getStrJson();			if(bNetWork.getReturnCode() == ReturnCode.RETURNCODE_OK){				/**版本升级处理*/				final ApkBean apk = JSON.parseObject(strJson, ApkBean.class);				UpdateManager manager = new UpdateManager(MainActivity.this, apk);				manager.checkUpdateInfo();			}		}	}        private void doIMLogin() {//		final String username = "bg"+BGApp.mUserId;		final String username = "bg11";		final String password = "banggood123";		if (!TextUtils.isEmpty(username) && !TextUtils.isEmpty(password)) {						LoadingProgress.getInstance().show(this,"正在登录");			// 调用sdk登陆方法登陆聊天服务器			EMChatManager.getInstance().login(username, password, new EMCallBack() {				@Override				public void onSuccess() {					// 登陆成功，保存用户名密码					BGApp.getInstance().setUserName(username);					BGApp.getInstance().setPassword(password);					runOnUiThread(new Runnable() {						public void run() {							LoadingProgress.getInstance().show(MainActivity.this,"正在获取好友和群聊列表...");						}					});					try {						// ** 第一次登录或者之前logout后，加载所有本地群和回话						// ** manually load all local groups and						// conversations in case we are auto login						EMGroupManager.getInstance().loadAllGroups();						EMChatManager.getInstance().loadAllConversations();						// demo中简单的处理成每次登陆都去获取好友username，开发者自己根据情况而定						List<String> usernames = EMContactManager.getInstance().getContactUserNames();						EMLog.d("roster", "contacts size: " + usernames.size());						Map<String, User> userlist = new HashMap<String, User>();						for (String username : usernames) {							User user = new User();							user.setUsername(username);							setUserHearder(username, user);							userlist.put(username, user);						}						// 添加user"申请与通知"						User newFriends = new User();						newFriends.setUsername(Constant.NEW_FRIENDS_USERNAME);						newFriends.setNick("申请与通知");						newFriends.setHeader("");						userlist.put(Constant.NEW_FRIENDS_USERNAME, newFriends);						// 添加"群聊"						User groupUser = new User();						groupUser.setUsername(Constant.GROUP_USERNAME);						groupUser.setNick("群聊");						groupUser.setHeader("");						userlist.put(Constant.GROUP_USERNAME, groupUser);						// 存入内存						BGApp.getInstance().setContactList(userlist);						// 存入db						UserDao dao = new UserDao(MainActivity.this);						List<User> users = new ArrayList<User>(userlist.values());						dao.saveContactList(users);						// 获取群聊列表(群聊里只有groupid和groupname等简单信息，不包含members),sdk会把群组存入到内存和db中						EMGroupManager.getInstance().getGroupsFromServer();					} catch (Exception e) {						e.printStackTrace();					}					//更新当前用户的nickname 此方法的作用是在ios离线推送时能够显示用户nick					boolean updatenick = EMChatManager.getInstance().updateCurrentUserNick(BGApp.currentUserNick);					if (!updatenick) {						EMLog.e("LoginActivity", "update current user nick fail");					}										LoadingProgress.getInstance().dismiss();				}				@Override				public void onProgress(int progress, String status) {				}				@Override				public void onError(final int code, final String message) {					runOnUiThread(new Runnable() {						public void run() {							LoadingProgress.getInstance().dismiss();							BToast.show(MainActivity.this, "登录聊天服务器失败");						}					});				}			});		}	}		/**	 * 设置hearder属性，方便通讯中对联系人按header分类显示，以及通过右侧ABCD...字母栏快速定位联系人	 * 	 * @param username	 * @param user	 */	protected void setUserHearder(String username, User user) {		String headerName = null;		if (!TextUtils.isEmpty(user.getNick())) {			headerName = user.getNick();		} else {			headerName = user.getUsername();		}		if (username.equals(Constant.NEW_FRIENDS_USERNAME)) {			user.setHeader("");		} else if (Character.isDigit(headerName.charAt(0))) {			user.setHeader("#");		} else {			user.setHeader(HanziToPinyin.getInstance().get(headerName.substring(0, 1)).get(0).target.substring(0, 1).toUpperCase());			char header = user.getHeader().toLowerCase().charAt(0);			if (header < 'a' || header > 'z') {				user.setHeader("#");			}		}	}}